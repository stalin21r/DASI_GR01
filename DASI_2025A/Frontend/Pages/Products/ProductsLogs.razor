@page "/Productos/Historial"

@using System.Text.Json
@inject NavigationManager NavigationManager
@inject IProductService _productService

<PageTitle>Gestionar Productos</PageTitle>

<div class="space-y-4 w-full">
  <section class="flex flex-col w-full justify-center items-start">
    <div class="p-2 flex gap-4 justify-center items-center">
      <img src="/Assets/Images/mapache.webp" alt="mapache scout SSCC" class="w-auto h-[120px]">
      <div class="text-center">
        <div class="flex flex-col">
          <span class="text-sm font-bold text-[#2b4266]">SS.CC.</span>
          <span class="text-2xl font-bold text-[#1C328C]">Rumipamba</span>
        </div>
        <span class="text-gray-400/90 text-sm font-bold">Historial de Cambios del Producto</span>
      </div>
    </div>
  </section>

  <section class="w-full flex justify-between items-center px-4">
    <h1 class="text-4xl font-bold text-[#427500]">Historial</h1>
  </section>

  @if (products == null && string.IsNullOrEmpty(errorMessage))
  {
    <h1 class="text-sm font-bold text-[#427500]">Cargando...</h1>
  }
  else if (!string.IsNullOrEmpty(errorMessage))
  {
    <h1 class="text-sm font-bold text-[#427500]">@errorMessage</h1>
  }
  else
  {
    <section>
      <div class="p-6">
        <div class="flex justify-end w-full px-6 py-2">
          <nav class="inline-flex space-x-1">
            <button @onclick="() => GoToPage(currentPage - 1)"
              class="w-7 h-7 rounded-full font-bold text-black flex justify-center items-center hover:bg-green-800/70 hover:text-white cursor-pointer transition duration-300"
              disabled="@(@currentPage == 1)"><i class="fa-solid fa-chevron-left"></i></button>

            @for (int i = 1; i <= totalPages; i++)
            {
              <button @onclick="() => GoToPage(i)"
                class="w-7 h-7 font-bold text-center rounded-full @(i == currentPage ? "bg-blue-500/80 text-white" : "bg-white hover:bg-gray-300/80 cursor-pointer") text-xs">
                @i
              </button>
            }

            <button @onclick="() => GoToPage(currentPage + 1)"
              class="w-7 h-7 rounded-full font-bold text-black flex justify-center items-center hover:bg-green-800/70 hover:text-white cursor-pointer transition duration-300"
              disabled="@(@currentPage == totalPages)"><i class="fa-solid fa-chevron-right"></i></button>
          </nav>
        </div>
        <div class="overflow-hidden rounded-lg shadow-2xl">
          <table class="w-full">
            <thead class="bg-gray-200 font-bold">
              @{
                var headers = new List<string> { "#", "Producto", "Acción", "Descripción", "Usuario", "Cant. Antes", "Cant. Después",
                        "Fecha"};
              }
              <tr>
                @foreach (var header in headers)
                {
                  <th class="px-6 py-3 text-left text-sm uppercase tracking-wider">@header</th>
                }
              </tr>
            </thead>
            <tbody class="bg-white divide-y divide-gray-200">
              @foreach (var (product, index) in PagedProducts.Select((p, i) => (p, i)))
              {

                <tr class="hover:bg-gray-50 transition-colors duration-150">
                  <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">@((currentPage - 1) * pageSize + index + 1)</td>
                  <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">@product.ProductName</td>
                  <td class="px-6 py-4 text-sm text-gray-500 max-w-xs truncate">@product.Action</td>
                  <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">@product.Description</td>
                  <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                    @product.UserName
                  </td>
                  <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">@product.QuantityBefore</td>
                  <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">@product.QuantityAfter</td>
                  <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">@product.AuditableDate</td>

                </tr>

              }
            </tbody>
          </table>
        </div>
      </div>
    </section>
  }
</div>
@code
{
  private IEnumerable<ProductLoggerDto>? products;
  private string? errorMessage;

  private int currentPage = 1;
  private int pageSize = 10;
  private int totalPages = 1;

  private IEnumerable<ProductLoggerDto> PagedProducts =>
  products?.Skip((currentPage - 1) * pageSize).Take(pageSize) ?? Enumerable.Empty<ProductLoggerDto>();

  protected override async Task OnInitializedAsync()
  {
    var response = await _productService.GetAllProductsLoggerAsync();


    if (response.data is null)
    {
      errorMessage = response.message;
    }
    else
    {
      products = response.data.ToList();
      totalPages = (int)Math.Ceiling((double)products.Count() / pageSize);
    }
  }

  private void GoToPage(int page)
  {
    if (page < 1 || page > totalPages) return;
    currentPage = page;
  }

}