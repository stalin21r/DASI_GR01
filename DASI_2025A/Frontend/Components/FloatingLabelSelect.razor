@namespace Frontend.Components
@using Microsoft.AspNetCore.Components.Web

<div class="relative w-full">
    <label
        for="@Name"
        class=@($"absolute left-3 transition-all duration-200 pointer-events-none {LabelClasses}")
        style="WebkitTextStroke: 0.2px white;">
        @Label
    </label>

    <select
        id="@Name"
        name="@Name"
        value="@SelectedValue"
        @onchange="HandleChange"
        @onfocus="() => IsFocused = true"
        @onblur="() => IsFocused = false"
        class=@($"w-full px-3 pt-4 pb-4 bg-white border border-gray-400 rounded-xl focus:outline-none focus:ring-2 {RingColor} text-black font-semibold focus:border-transparent z-200")>

        @ChildContent
    </select>
</div>

@code {
    [Parameter] public required string Label { get; set; }
    [Parameter] public required string Name { get; set; }
    [Parameter] public string Placeholder { get; set; } = "";

    [Parameter]
    public string SelectedValue { get; set; } = "";
    
    [Parameter]
    public EventCallback<string> SelectedValueChanged { get; set; }

    [Parameter] public string LabelColor { get; set; } = "blue";

    [Parameter] public RenderFragment? ChildContent { get; set; }

    private bool IsFocused { get; set; } = false;

    private bool ShouldFloat => IsFocused || !string.IsNullOrWhiteSpace(SelectedValue);

    private string LabelClasses => ShouldFloat
        ? $"text-lg -top-7 left-4 bg-inherit z-2 px-1 {(IsFocused ? $"{TextColor} font-bold" : "text-gray-500 font-normal")}"
        : "text-gray-500 top-1/2 -translate-y-1/2";

    private string TextColor => LabelColor switch
    {
        "red" => "text-red-600",
        "green" => "text-green-600",
        "purple" => "text-purple-600",
        "pink" => "text-pink-600",
        "indigo" => "text-indigo-600",
        _ => "text-blue-600"
    };

    private string RingColor => LabelColor switch
    {
        "red" => "focus:ring-red-500",
        "green" => "focus:ring-green-500",
        "purple" => "focus:ring-purple-500",
        "pink" => "focus:ring-pink-500",
        "indigo" => "focus:ring-indigo-500",
        _ => "focus:ring-blue-500"
    };

    private async Task HandleChange(ChangeEventArgs e)
    {
        SelectedValue = e.Value?.ToString() ?? "";
        await SelectedValueChanged.InvokeAsync(SelectedValue);
    }
}